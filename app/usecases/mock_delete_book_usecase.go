// Code generated by MockGen. DO NOT EDIT.
// Source: delete_book_usecase.go

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeleteBookUseCase is a mock of DeleteBookUseCase interface.
type MockDeleteBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteBookUseCaseMockRecorder
}

// MockDeleteBookUseCaseMockRecorder is the mock recorder for MockDeleteBookUseCase.
type MockDeleteBookUseCaseMockRecorder struct {
	mock *MockDeleteBookUseCase
}

// NewMockDeleteBookUseCase creates a new mock instance.
func NewMockDeleteBookUseCase(ctrl *gomock.Controller) *MockDeleteBookUseCase {
	mock := &MockDeleteBookUseCase{ctrl: ctrl}
	mock.recorder = &MockDeleteBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteBookUseCase) EXPECT() *MockDeleteBookUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDeleteBookUseCase) Execute(arg0 *DeleteBookUseCaseInputDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDeleteBookUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteBookUseCase)(nil).Execute), arg0)
}

// MockDeleteBookUseCaseRepository is a mock of DeleteBookUseCaseRepository interface.
type MockDeleteBookUseCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteBookUseCaseRepositoryMockRecorder
}

// MockDeleteBookUseCaseRepositoryMockRecorder is the mock recorder for MockDeleteBookUseCaseRepository.
type MockDeleteBookUseCaseRepositoryMockRecorder struct {
	mock *MockDeleteBookUseCaseRepository
}

// NewMockDeleteBookUseCaseRepository creates a new mock instance.
func NewMockDeleteBookUseCaseRepository(ctrl *gomock.Controller) *MockDeleteBookUseCaseRepository {
	mock := &MockDeleteBookUseCaseRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteBookUseCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteBookUseCaseRepository) EXPECT() *MockDeleteBookUseCaseRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeleteBookUseCaseRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeleteBookUseCaseRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleteBookUseCaseRepository)(nil).Delete), id)
}
