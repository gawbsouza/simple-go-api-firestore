// Code generated by MockGen. DO NOT EDIT.
// Source: get_book_usecase.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entity "library/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetBookUseCase is a mock of GetBookUseCase interface.
type MockGetBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetBookUseCaseMockRecorder
}

// MockGetBookUseCaseMockRecorder is the mock recorder for MockGetBookUseCase.
type MockGetBookUseCaseMockRecorder struct {
	mock *MockGetBookUseCase
}

// NewMockGetBookUseCase creates a new mock instance.
func NewMockGetBookUseCase(ctrl *gomock.Controller) *MockGetBookUseCase {
	mock := &MockGetBookUseCase{ctrl: ctrl}
	mock.recorder = &MockGetBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetBookUseCase) EXPECT() *MockGetBookUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetBookUseCase) Execute(arg0 *GetBookUseCaseInputDTO) (*GetBookUseCaseOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*GetBookUseCaseOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetBookUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetBookUseCase)(nil).Execute), arg0)
}

// MockGetBookUseCaseRepository is a mock of GetBookUseCaseRepository interface.
type MockGetBookUseCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetBookUseCaseRepositoryMockRecorder
}

// MockGetBookUseCaseRepositoryMockRecorder is the mock recorder for MockGetBookUseCaseRepository.
type MockGetBookUseCaseRepositoryMockRecorder struct {
	mock *MockGetBookUseCaseRepository
}

// NewMockGetBookUseCaseRepository creates a new mock instance.
func NewMockGetBookUseCaseRepository(ctrl *gomock.Controller) *MockGetBookUseCaseRepository {
	mock := &MockGetBookUseCaseRepository{ctrl: ctrl}
	mock.recorder = &MockGetBookUseCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetBookUseCaseRepository) EXPECT() *MockGetBookUseCaseRepositoryMockRecorder {
	return m.recorder
}

// SelectById mocks base method.
func (m *MockGetBookUseCaseRepository) SelectById(id string) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectById", id)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectById indicates an expected call of SelectById.
func (mr *MockGetBookUseCaseRepositoryMockRecorder) SelectById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectById", reflect.TypeOf((*MockGetBookUseCaseRepository)(nil).SelectById), id)
}
