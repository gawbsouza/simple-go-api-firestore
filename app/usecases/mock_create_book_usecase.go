// Code generated by MockGen. DO NOT EDIT.
// Source: create_book_usecase.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entity "library/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateBookUseCase is a mock of CreateBookUseCase interface.
type MockCreateBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBookUseCaseMockRecorder
}

// MockCreateBookUseCaseMockRecorder is the mock recorder for MockCreateBookUseCase.
type MockCreateBookUseCaseMockRecorder struct {
	mock *MockCreateBookUseCase
}

// NewMockCreateBookUseCase creates a new mock instance.
func NewMockCreateBookUseCase(ctrl *gomock.Controller) *MockCreateBookUseCase {
	mock := &MockCreateBookUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateBookUseCase) EXPECT() *MockCreateBookUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateBookUseCase) Execute(arg0 *CreateBookUseCaseInputDTO) (*CreateBookUseCaseOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*CreateBookUseCaseOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateBookUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateBookUseCase)(nil).Execute), arg0)
}

// MockCreateBookUseCaseRepository is a mock of CreateBookUseCaseRepository interface.
type MockCreateBookUseCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBookUseCaseRepositoryMockRecorder
}

// MockCreateBookUseCaseRepositoryMockRecorder is the mock recorder for MockCreateBookUseCaseRepository.
type MockCreateBookUseCaseRepositoryMockRecorder struct {
	mock *MockCreateBookUseCaseRepository
}

// NewMockCreateBookUseCaseRepository creates a new mock instance.
func NewMockCreateBookUseCaseRepository(ctrl *gomock.Controller) *MockCreateBookUseCaseRepository {
	mock := &MockCreateBookUseCaseRepository{ctrl: ctrl}
	mock.recorder = &MockCreateBookUseCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateBookUseCaseRepository) EXPECT() *MockCreateBookUseCaseRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateBookUseCaseRepository) Insert(arg0 *entity.Book) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateBookUseCaseRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateBookUseCaseRepository)(nil).Insert), arg0)
}
