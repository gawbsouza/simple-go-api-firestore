// Code generated by MockGen. DO NOT EDIT.
// Source: get_all_books_usecase.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entity "library/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetAllBooksUseCase is a mock of GetAllBooksUseCase interface.
type MockGetAllBooksUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllBooksUseCaseMockRecorder
}

// MockGetAllBooksUseCaseMockRecorder is the mock recorder for MockGetAllBooksUseCase.
type MockGetAllBooksUseCaseMockRecorder struct {
	mock *MockGetAllBooksUseCase
}

// NewMockGetAllBooksUseCase creates a new mock instance.
func NewMockGetAllBooksUseCase(ctrl *gomock.Controller) *MockGetAllBooksUseCase {
	mock := &MockGetAllBooksUseCase{ctrl: ctrl}
	mock.recorder = &MockGetAllBooksUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllBooksUseCase) EXPECT() *MockGetAllBooksUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAllBooksUseCase) Execute() ([]*GetAllBooksUseCaseOutputDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].([]*GetAllBooksUseCaseOutputDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAllBooksUseCaseMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAllBooksUseCase)(nil).Execute))
}

// MockGetAllBooksUseCaseRepository is a mock of GetAllBooksUseCaseRepository interface.
type MockGetAllBooksUseCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllBooksUseCaseRepositoryMockRecorder
}

// MockGetAllBooksUseCaseRepositoryMockRecorder is the mock recorder for MockGetAllBooksUseCaseRepository.
type MockGetAllBooksUseCaseRepositoryMockRecorder struct {
	mock *MockGetAllBooksUseCaseRepository
}

// NewMockGetAllBooksUseCaseRepository creates a new mock instance.
func NewMockGetAllBooksUseCaseRepository(ctrl *gomock.Controller) *MockGetAllBooksUseCaseRepository {
	mock := &MockGetAllBooksUseCaseRepository{ctrl: ctrl}
	mock.recorder = &MockGetAllBooksUseCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllBooksUseCaseRepository) EXPECT() *MockGetAllBooksUseCaseRepositoryMockRecorder {
	return m.recorder
}

// SelectAll mocks base method.
func (m *MockGetAllBooksUseCaseRepository) SelectAll() ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockGetAllBooksUseCaseRepositoryMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockGetAllBooksUseCaseRepository)(nil).SelectAll))
}
